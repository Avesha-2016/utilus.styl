// Stylus don't allow us to reassign global variables in functions, so I made this:
// Only variable/one-level arrays are supported though
//   `reassign($foo,"new")` is like `$foo = "new"`, but now works in functions, yays!

reassign($where, $what)
  for i in $where
    $void = pop($where)
  push($where,$what)


// Proxy for throwing arguments into some function
proxy(func, args)
  if length(args) == 1
    func(args)
  else if length(args) == 2
    func(args[0],args[1])
  else if length(args) == 3
    func(args[0],args[1],args[2])
  else if length(args) == 4
    func(args[0],args[1],args[2],args[3])
  else if length(args) == 5
    func(args[0],args[1],args[2],args[3],args[4])
  else if length(args) == 6
    func(args[0],args[1],args[2],args[3],args[4],args[5])
  else if length(args) == 7
    func(args[0],args[1],args[2],args[3],args[4],args[5],args[6])

// Do some func on every item of the given argument (second)
mass(func, args...)
  what = args[0]
  if !is_array(what)
    what = proxy(func, args)
  else
    for w,i in what
      newargs = arguments
      newargs[1] = w
      what[i] = proxy(mass, newargs)
  return what


// Simple shortcut to check if the argument is an array
is_array()
  return length(arguments) > 1


// Simple shortcut to check if the argument is a hash
is_hash()
  return (arguments[0][1] or arguments[0][1] == "0") ? true : false


// Added functions to round things with the given precise
floor_precise($number, $precision = 0)
  $multiplier = 10 ** $precision
  return floor($number * $multiplier) / $multiplier

ceil_precise($number, $precision = 0)
  $multiplier = 10 ** $precision
  return ceil($number * $multiplier) / $multiplier

round_precise($number, $precision = 0)
  $multiplier = 10 ** $precision
  return round($number * $multiplier) / $multiplier


// Returns first defined variable or entity, false otherwise
//   predefined arguments are needed so the function would
//   return an array if it's the only argument
or($arg1, $arg2 = false, args...)
  for $arg in arguments
    return $arg if $arg != false and (typeof($arg) != 'ident' or is_array($arg) or $arg == 0)
  return false


// Flatten nested arrays to a flat one-level array
// Use as
//   a: flatten(1..5, 7..10, 14..15, 17..18)
//   a: flatten(1..5 7..10 14..15 17..18)

flatten()
  result = ()

  compute()
    for arg in arguments
      if length(arg) > 1
        compute(arg)
      else
        push(result, arg)

  compute(arguments)
  return result


// Hash getter with possible fallback.
// Returns `false` if nothing found, or no `fallback` given
get($hash, $key = false, $fallback = false)
  if is_array($hash) and $key
    return $pair[1..length($pair)] if $pair[0] == $key for $pair in $hash if is_hash($hash)
    return $hash[1..length($hash)] if $hash[0] == $key

  return $fallback
  // Should we return there the `$hash` itself?
  // Should we make sure that $fallback exists?
  // What if hash contains multiple items with the same key?


// Getter of an argument at the given index
// Should it be merged with either simple `get` or `or`?
get_n($where, $index = 0, $type = 'any')
  $i = 0
  for $arg in $where
    if $type == 'any' or $type == type($arg)
      if $i == $index
        return $arg
      else
        $i = $i + 1
  return false

get_string($where, $index = 0)
  get_n($where, $index, 'string')

get_ident($where, $index = 0)
  get_n($where, $index, 'ident')

get_unit($where, $index = 0)
  get_n($where, $index, 'unit')

get_color($where, $index = 0)
  get_n($where, $index, 'rgba')


/* Color functions
========================================*/

// Transparentify a color
// Inspiration: https://github.com/LearnBoost/stylus/issues/313
// Use as
//   color: rgb2rgba(#CC6699)
rgb2rgba(color, underlay = #FFF)
  r1 = red(color)
  g1 = green(color)
  b1 = blue(color)

  r2 = red(underlay)
  g2 = green(underlay)
  b2 = blue(underlay)

  a1 = a2 = a3 = abs(r1 - r2) / 255 if r1 != r2

  a1 = abs(r1 - r2) / (255 - r2) if not r2 in (r1 255)
  a2 = abs(g1 - g2) / (255 - g2) if not g2 in (g1 255)
  a3 = abs(b1 - b2) / (255 - b2) if not b2 in (b1 255)

  a = min(a1,min(a2,a3))

  r = r2 + (r1 - r2) / floor_precise(a, 2)
  g = g2 + (g1 - g2) / floor_precise(a, 2)
  b = b2 + (b1 - b2) / floor_precise(a, 2)

  a = round_precise(a, 2)

  return rgba(r,g,b,a)

// Alias
transparentify = rgb2rgba


// Getting luminance of a color,
//   got from https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js#L55
luminance($color)
  f($c)
    $c = $c / 255
    return ($c < 0.03928) ? ($c / 12.92) : (($c + 0.055) / 1.055) ** 2.4;
  return 0.2126 * f(red($color)) + 0.7152 * f(green($color)) + 0.0722 * f(blue($color));


// Basic color blending
blend($top,$bottom = #FFF)
  // Only normal blending here for now
  return $top if alpha($top) == 1
  return $bottom if alpha($top) == 0

  newR = (1 - alpha($top)) *   red($bottom) + alpha($top) *   red($top)
  newG = (1 - alpha($top)) * green($bottom) + alpha($top) * green($top)
  newB = (1 - alpha($top)) *  blue($bottom) + alpha($top) *  blue($top)
  newA = 1 // FIXME: should be smth different if the alpha of $bottom != 1

  return rgba(newR,newG,newB,newA)


// Determining contrast ratio,
//   based on https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js#L108
//       .. 3   == bad for any text
//   3   .. 4.5 == bad for small text
//   4.5 .. 7   == perfect for big text
//   7   ..     == perfect for any size
contrast($top,$bottom = #FFF)
  if alpha($bottom) >= 1
    $l1 = luminance($bottom) + .05
    $l2 = luminance( alpha($top) < 1 ? blend($top,$bottom) : $top ) + .05
    $ratio = $l1 / $l2
    if $l2 > $l1
      $ratio = 1 / $ratio
    return round_precise($ratio,1)
  else
    // FIXME: some minor difference there with http://leaverou.github.com/contrast-ratio/
    $closest = \
      rgb(min(max(0, (red($top)   - red($bottom)   * alpha($bottom)) / (1 - alpha($bottom))),255), \
          min(max(0, (green($top) - green($bottom) * alpha($bottom)) / (1 - alpha($bottom))),255), \
          min(max(0, (blue($top)  - blue($bottom)  * alpha($bottom)) / (1 - alpha($bottom))),255))
    $max = max(contrast($top,blend($bottom,#FFF)),contrast($top,blend($bottom,#000)))
    $min = contrast($top,$closest)
    return (round_precise(($min + $max) / 2, 2) $min $max)


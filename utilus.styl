// Simple shortcut to check if the argument is an array
is_array()
  return length(arguments) > 1


// Simple shortcut to check if the argument is a hash
is_hash()
  return (arguments[0][1] or arguments[0][1] == "0") ? true : false


// Returns first defined variable or entity, false otherwise
//   predefined arguments are needed so the function would
//   return an array if it's the only argument
or($arg1, $arg2 = false, args...)
  for $arg in arguments
    return $arg if $arg != false and (typeof($arg) != 'ident' or is_array($arg) or $arg == 0)
  return false


// Flatten nested arrays to a flat one-level array
// Use as
//   a: flatten(1..5, 7..10, 14..15, 17..18)
//   a: flatten(1..5 7..10 14..15 17..18)

flatten()
  result = ()

  compute()
    for arg in arguments
      if length(arg) > 1
        compute(arg)
      else
        push(result, arg)

  compute(arguments)
  return result


// Hash getter with possible fallback.
// Returns `false` if nothing found, or no `fallback` given
get($hash, $key = false, $fallback = false)
  if is_array($hash) and $key
    return $pair[1..length($pair)] if $pair[0] == $key for $pair in $hash if is_hash($hash)
    return $hash[1..length($hash)] if $hash[0] == $key

  return $fallback
  // Should we return there the `$hash` itself?
  // Should we make sure that $fallback exists?
  // What if hash contains multiple items with the same key?


// Transparentify a color
// Inspiration: https://github.com/LearnBoost/stylus/issues/313
// Use as
//   color: rgb2rgba(#CC6699)
rgb2rgba(color, underlay = #FFF)
  r1 = red(color)
  g1 = green(color)
  b1 = blue(color)

  r2 = red(underlay)
  g2 = green(underlay)
  b2 = blue(underlay)

  a1 = a2 = a3 = abs(r1 - r2) / 255 if r1 != r2

  a1 = abs(r1 - r2) / (255 - r2) if not r2 in (r1 255)
  a2 = abs(g1 - g2) / (255 - g2) if not g2 in (g1 255)
  a3 = abs(b1 - b2) / (255 - b2) if not b2 in (b1 255)

  a = min(a1,min(a2,a3))

  r = r2 + (r1 - r2) / (floor(a * 100) / 100)
  g = g2 + (g1 - g2) / (floor(a * 100) / 100)
  b = b2 + (b1 - b2) / (floor(a * 100) / 100)

  a = round(a * 100) / 100

  return rgba(r,g,b,a)

// Alias
transparentify = rgb2rgba


// Full color getter, returns full hex representation
// Inspiration: https://github.com/LearnBoost/stylus/issues/581
hex(n)
  digit(v)
    return ( ""+v "A" "B" "C" "D" "E" "F" )[ max(0, v - 9) ]

  h = floor(n / 16) % 16
  l = n % 16
  digit(h) + digit(l)

fullcolor(x)
  unquote("#" + hex(red(x)) + hex(green(x)) + hex(blue(x)))

